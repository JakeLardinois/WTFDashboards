<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DeleteWOMetricByTypeAndDate" xml:space="preserve">
    <value>DELETE
FROM WorkOrderMetrics
WHERE MetricType = '~p0' AND DateCreated = '~p1'</value>
  </data>
  <data name="SelectFactTrakItemCostsByDate" xml:space="preserve">
    <value>SELECT lc_ea_item_whse_loc_facts.Warehouse
      ,lc_ea_item_whse_loc_facts.Item_Nbr
      ,lc_ea_item_whse_loc_facts.Record_Date
      ,lc_ea_item_whse_loc_facts.Whse_Qty_On_Hand
      ,lc_ea_item_whse_loc_facts.Whse_Inv_Value
      ,lc_ea_items.Purch_Manuf
FROM lc_ea_item_whse_loc_facts INNER JOIN lc_ea_items
	ON lc_ea_item_whse_loc_facts.Item_Nbr = lc_ea_items.Item_Nbr
WHERE Record_Date &gt;= '~p0' AND Record_Date &lt;= '~p1' AND Record_Type = 'Whse' AND Whse_Qty_On_Hand &gt; 0</value>
  </data>
  <data name="SelectItemByItemList" xml:space="preserve">
    <value>SELECT *
FROM item
WHERE item in (~p0)</value>
  </data>
  <data name="SelectItemPricesByItemList" xml:space="preserve">
    <value>SELECT item
      ,effect_date
      ,curr_code
      ,unit_price1
      ,unit_price2
      ,unit_price3
      ,unit_price4
      ,unit_price5
      ,unit_price6
      ,reprice
      ,brk_qty##1 AS brk_qty__1
      ,brk_qty##2 AS brk_qty__2
      ,brk_qty##3 AS brk_qty__3
      ,brk_qty##4 AS brk_qty__4
      ,brk_qty##5 AS brk_qty__5
      ,brk_price##1 AS brk_price__1
      ,brk_price##2 AS brk_price__2
      ,brk_price##3 AS brk_price__3
      ,brk_price##4 AS brk_price__4
      ,brk_price##5 AS brk_price__5
      ,base_code##1 AS base_code__1
      ,base_code##2 AS base_code__2
      ,base_code##3 AS base_code__3
      ,base_code##4 AS base_code__4
      ,base_code##5 AS base_code__5
      ,dol_percent##1 AS dol_percent__1
      ,dol_percent##2 AS dol_percent__2
      ,dol_percent##3 AS dol_percent__3
      ,dol_percent##4 AS dol_percent__4
      ,dol_percent##5 AS dol_percent__5
      ,pricecode
      ,NoteExistsFlag
      ,RecordDate
      ,RowPointer
      ,CreatedBy
      ,UpdatedBy
      ,CreateDate
      ,InWorkflow
      ,uf_pref_type
  FROM itemprice
  WHERE item in (~p0)</value>
  </data>
  <data name="SelectItemWhseByItemList" xml:space="preserve">
    <value>SELECT *
FROM itemwhse
WHERE item in (~p0)</value>
  </data>
  <data name="SelectItemWhseItemCosts" xml:space="preserve">
    <value>SELECT itemwhse.whse AS Warehouse, itemwhse.item AS Item, item.p_m_t_code AS Source, itemwhse.qty_on_hand AS QtyOnHand, 
	item.unit_cost AS UnitCost, (itemwhse.qty_on_hand * item.unit_cost) AS TotalCost
FROM itemwhse
	INNER JOIN item ON item.item = itemwhse.item
WHERE itemwhse.qty_on_hand &gt; 0</value>
  </data>
  <data name="SelectItemWhseTypeCosts" xml:space="preserve">
    <value>SELECT itemwhse.whse AS Warehouse, item.p_m_t_code AS Source, SUM(itemwhse.qty_on_hand * item.unit_cost) AS TotalCost
FROM itemwhse
	INNER JOIN item ON item.item = itemwhse.item
WHERE itemwhse.qty_on_hand &gt; 0
GROUP BY itemwhse.whse, item.p_m_t_code</value>
  </data>
  <data name="SelectItemWIPRemaining" xml:space="preserve">
    <value>SELECT whse, item, SUM(wip_total - wip_complete) AS WIP_Remaining
FROM job
WHERE (wip_total - wip_complete &lt;&gt; 0)
GROUP BY whse, item</value>
  </data>
  <data name="SelectRecentMatlTranByItemList" xml:space="preserve">
    <value>SELECT item, MAX(trans_date) AS trans_date
  FROM matltran
  WHERE item IN (~p0) AND (trans_type = 'S' OR trans_type = 'F')
  GROUP BY item</value>
  </data>
  <data name="StoredProcedurePermissions" xml:space="preserve">
    <value>GRANT EXECUTE ON [WTF_App].[dbo].Rpt_InventoryCostSp TO WTFApp</value>
  </data>
</root>